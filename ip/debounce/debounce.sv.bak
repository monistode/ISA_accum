module debounce #(
    parameter WIDTH         = 32,
    parameter polarity      = "HIGH",
    parameter TIMEOUT       = 50000,
    parameter TIMEOUT_WIDTH = 16
) (
    input logic clk,
    input logic reset,
    input logic [WIDTH - 1:0] data_in,
    output logic [WIDTH - 1:0] data_out
);
    logic [TIMEOUT_WIDTH-1:0] counter [0:WIDTH-1];
    logic counter_reset [0:WIDTH-1];
    logic counter_enable [0:WIDTH-1];

    genvar i;
    generate
    for (i = 0; i < WIDTH; i = i+1) begin
        always_ff @ (posedge clk or negedge reset_n) begin
            if (reset_n == 0) begin
              counter[i] <= 0;
            end else begin
              if (counter_reset[i] == 1) begin
                counter[i] <= 0;
              end else if (counter_enable[i] == 1) begin
                counter[i] <= counter[i] + 1'b1;
              end
            end
        end
        
        if (POLARITY == "HIGH") begin
            assign counter_reset[i] = ~data_in[i];
            assign counter_enable[i] = data_in[i] & (counter[i] < TIMEOUT);
            assign data_out[i] = (counter[i] == TIMEOUT) ? 1'b1 : 1'b0;
        end else begin
            assign counter_reset[i] = data_in[i];
            assign counter_enable[i] = (~data_in[i]) & (counter[i] < TIMEOUT);
            assign data_out[i] = (counter[i] == TIMEOUT) ? 1'b0 : 1'b1;    
        end
        
    end  
    endgenerate
    
endmodule

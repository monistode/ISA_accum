	component soc_system is
		port (
			clk_clk                 : in    std_logic                     := 'X';             -- clk
			hps_0_h2f_reset_reset_n : out   std_logic;                                        -- reset_n
			memory_mem_a            : out   std_logic_vector(14 downto 0);                    -- mem_a
			memory_mem_ba           : out   std_logic_vector(2 downto 0);                     -- mem_ba
			memory_mem_ck           : out   std_logic;                                        -- mem_ck
			memory_mem_ck_n         : out   std_logic;                                        -- mem_ck_n
			memory_mem_cke          : out   std_logic;                                        -- mem_cke
			memory_mem_cs_n         : out   std_logic;                                        -- mem_cs_n
			memory_mem_ras_n        : out   std_logic;                                        -- mem_ras_n
			memory_mem_cas_n        : out   std_logic;                                        -- mem_cas_n
			memory_mem_we_n         : out   std_logic;                                        -- mem_we_n
			memory_mem_reset_n      : out   std_logic;                                        -- mem_reset_n
			memory_mem_dq           : inout std_logic_vector(31 downto 0) := (others => 'X'); -- mem_dq
			memory_mem_dqs          : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs
			memory_mem_dqs_n        : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs_n
			memory_mem_odt          : out   std_logic;                                        -- mem_odt
			memory_mem_dm           : out   std_logic_vector(3 downto 0);                     -- mem_dm
			memory_oct_rzqin        : in    std_logic                     := 'X';             -- oct_rzqin
			reset_reset_n           : in    std_logic                     := 'X';             -- reset_n
			sdram_address           : in    std_logic_vector(21 downto 0) := (others => 'X'); -- address
			sdram_byte_enable       : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- byte_enable
			sdram_read              : in    std_logic                     := 'X';             -- read
			sdram_write             : in    std_logic                     := 'X';             -- write
			sdram_write_data        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- write_data
			sdram_acknowledge       : out   std_logic;                                        -- acknowledge
			sdram_read_data         : out   std_logic_vector(31 downto 0);                    -- read_data
			uart_RXD                : in    std_logic                     := 'X';             -- RXD
			uart_TXD                : out   std_logic;                                        -- TXD
			uart_in_data            : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			uart_in_error           : in    std_logic                     := 'X';             -- error
			uart_in_valid           : in    std_logic                     := 'X';             -- valid
			uart_in_ready           : out   std_logic;                                        -- ready
			uart_out_ready          : in    std_logic                     := 'X';             -- ready
			uart_out_data           : out   std_logic_vector(7 downto 0);                     -- data
			uart_out_error          : out   std_logic;                                        -- error
			uart_out_valid          : out   std_logic                                         -- valid
		);
	end component soc_system;

